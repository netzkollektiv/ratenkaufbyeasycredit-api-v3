class {{classname}} {{#parentSchema}}extends {{{parent}}}{{/parentSchema}}{{^parentSchema}}implements ModelInterface, ArrayAccess, \JsonSerializable{{/parentSchema}}
{
    const DISCRIMINATOR = {{#discriminator}}'{{discriminatorName}}'{{/discriminator}}{{^discriminator}}null{{/discriminator}};

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '{{name}}';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        {{#vars}}'{{name}}' => '{{{dataType}}}'{{^-last}},
        {{/-last}}{{/vars}}
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        {{#vars}}'{{name}}' => {{#dataFormat}}'{{{.}}}'{{/dataFormat}}{{^dataFormat}}null{{/dataFormat}}{{^-last}},
        {{/-last}}{{/vars}}
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes{{#parentSchema}} + parent::openAPITypes(){{/parentSchema}};
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats{{#parentSchema}} + parent::openAPIFormats(){{/parentSchema}};
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        {{#vars}}'{{name}}' => '{{baseName}}'{{^-last}},
        {{/-last}}{{/vars}}
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        {{#vars}}'{{name}}' => '{{setter}}'{{^-last}},
        {{/-last}}{{/vars}}
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        {{#vars}}'{{name}}' => '{{getter}}'{{^-last}},
        {{/-last}}{{/vars}}
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return {{#parentSchema}}parent::attributeMap() + {{/parentSchema}}self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return {{#parentSchema}}parent::setters() + {{/parentSchema}}self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return {{#parentSchema}}parent::getters() + {{/parentSchema}}self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    {{#vars}}
    {{#isEnum}}
    {{#allowableValues}}
    {{#enumVars}}
    const {{enumName}}_{{{name}}} = {{{value}}};
    {{/enumVars}}
    {{/allowableValues}}
    {{/isEnum}}
    {{/vars}}

    {{#vars}}
    {{#isEnum}}
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function {{getter}}AllowableValues()
    {
        return [
            {{#allowableValues}}{{#enumVars}}self::{{enumName}}_{{{name}}},{{^-last}}
            {{/-last}}{{/enumVars}}{{/allowableValues}}
        ];
    }

    {{/isEnum}}
    {{/vars}}
    {{^parentSchema}}
    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];
    {{/parentSchema}}

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        {{#parentSchema}}
        parent::__construct($data);

        {{/parentSchema}}
        {{#vars}}
        $this->container['{{name}}'] = $data['{{name}}'] ?? {{{defaultValue}}}{{^defaultValue}}null{{/defaultValue}};
        {{/vars}}
        {{#discriminator}}

        // Initialize discriminator property with the model name.
        $this->container['{{discriminatorName}}'] = static::$openAPIModelName;
        {{/discriminator}}
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        {{#parentSchema}}
        $invalidProperties = parent::listInvalidProperties();
        {{/parentSchema}}
        {{^parentSchema}}
        $invalidProperties = [];
        {{/parentSchema}}

        {{#vars}}
        {{#required}}
        if ($this->container['{{name}}'] === null) {
            $invalidProperties[] = "'{{name}}' can't be null";
        }
        {{/required}}
        {{#isEnum}}
        {{^isContainer}}
        $allowedValues = $this->{{getter}}AllowableValues();
        if (!is_null($this->container['{{name}}']) && !in_array($this->container['{{name}}'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for '{{name}}', must be one of '%s'",
                $this->container['{{name}}'],
                implode("', '", $allowedValues)
            );
        }

        {{/isContainer}}
        {{/isEnum}}
        {{/vars}}
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    {{#vars}}

    /**
     * Gets {{name}}
     *
     * @return {{{dataType}}}{{^required}}|null{{/required}}
    {{#deprecated}}
     * @deprecated
    {{/deprecated}}
     */
    public function {{getter}}()
    {
        return $this->container['{{name}}'];
    }

    /**
     * Sets {{name}}
     *
     * @param {{{dataType}}}{{^required}}|null{{/required}} ${{name}}{{#description}} {{{.}}}{{/description}}{{^description}} {{{name}}}{{/description}}
     *
     * @return self
    {{#deprecated}}
     * @deprecated
    {{/deprecated}}
     */
    public function {{setter}}(${{name}})
    {
        {{#isEnum}}
        $allowedValues = $this->{{getter}}AllowableValues();
        {{^isContainer}}
        if ({{^required}}!is_null(${{name}}) && {{/required}}!in_array(${{{name}}}, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for '{{name}}', must be one of '%s'",
                    ${{{name}}},
                    implode("', '", $allowedValues)
                )
            );
        }
        {{/isContainer}}
        {{#isContainer}}
        if ({{^required}}!is_null(${{name}}) && {{/required}}array_diff(${{{name}}}, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for '{{name}}', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        {{/isContainer}}
        {{/isEnum}}
        $this->container['{{name}}'] = ${{name}};

        return $this;
    }
    {{/vars}}
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
